{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./src/pages/index.tsx","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","query","IndexPage","props","css","data","books","edges","map","node","key","id","to","fields","slug","src","frontmatter","thumbnail","publicURL","alt","title","mediumBlogs","nodes","blog","href","link","target","rel","date","site","siteMetadata","social","medium","games","cover","url","this"],"mappings":"8EAAA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,QAChBC,EAAU,EAAQ,QAClBC,EAAO,KAEPC,EAAa,SAAUC,EAAQC,EAAKC,EAAWC,GACjD,IAAIC,EAAIC,OAAOR,EAAQG,IACnBM,EAAK,IAAML,EAEf,MADkB,KAAdC,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQT,EAAM,UAAY,KACtFQ,EAAK,IAAMF,EAAI,KAAOH,EAAM,KAErCO,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKZ,GACfJ,EAAQA,EAAQkB,EAAIlB,EAAQmB,EAAIlB,GAAM,WACpC,IAAImB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAKC,OAAS,KAC7D,SAAUN,K,wkBCmKHO,EAAQ,aA4ENC,UAhLG,SAACC,GACjB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,MACA,2BACE,0CACA,mBACEC,IAAG,GAKFD,EAAME,KAAKC,MAAMC,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAC7B,OACE,mBACEC,IAAKD,EAAKE,GACVP,IAAG,GAKH,YAAC,OAAD,CAAMQ,GAAIH,EAAKI,OAAOC,MACpB,mBACEC,IAAKN,EAAKO,YAAYC,UAAUC,UAChCd,IAAG,EAGHe,IAAKV,EAAKO,YAAYI,eAQpC,2BACE,6CACCjB,EAAME,KAAKgB,YAAYC,MAAMd,KAAI,SAAAe,GAChC,OACE,iBACEb,IAAKa,EAAKZ,GACVa,KAAMD,EAAKE,KACXC,OAAO,SACPC,IAAI,sBACJvB,IAAG,GAIH,qBACGmB,EAAKH,MADR,MACkBG,EAAKK,UAK7B,iBACEJ,KAAMrB,EAAME,KAAKwB,KAAKC,aAAaC,OAAOC,OAC1CN,OAAO,SACPC,IAAI,sBACJvB,IAAG,GAIH,mCAGJ,2BACE,4CACA,mBACEA,IAAG,GAKFD,EAAME,KAAK4B,MAAM1B,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAC7B,OACE,mBACEC,IAAKD,EAAKE,GACVP,IAAG,GAKH,YAAC,OAAD,CAAMQ,GAAIH,EAAKI,OAAOC,MACpB,mBACEC,IAAKN,EAAKO,YAAYkB,MAAMhB,UAC5Bd,IAAG,EAGHe,IAAKV,EAAKO,YAAYI,kB,kCCtK1C,EAAQ,OAAR,CAA0B,QAAQ,SAAUvC,GAC1C,OAAO,SAAcsD,GACnB,OAAOtD,EAAWuD,KAAM,IAAK,OAAQD","file":"component---src-pages-index-tsx-450abbbad0559c3869ff.js","sourcesContent":["var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","import { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport { css } from '@emotion/core'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\ninterface AllMarkdownProps {\n  data: {\n    books: {\n      edges: [\n        {\n          node: {\n            id: string\n            frontmatter: {\n              title: string\n              cover: {\n                name: string\n                publicURL: string\n              }\n              thumbnail: {\n                name: string\n                publicURL: string\n              }\n              date: Date\n              tags: [string]\n            }\n            fields: {\n              slug: string\n            }\n            excerpt: string\n          }\n        },\n      ]\n    }\n    games: {\n      edges: [\n        {\n          node: {\n            id: string\n            frontmatter: {\n              title: string\n              cover: {\n                name: string\n                publicURL: string\n              }\n              thumbnail: {\n                name: string\n                publicURL: string\n              }\n              date: Date\n              tags: [string]\n            }\n            fields: {\n              slug: string\n            }\n            excerpt: string\n          }\n        },\n      ]\n    }\n    mediumBlogs: {\n      nodes: [\n        {\n          id: string\n          date: string\n          title: string\n          link: string\n        },\n      ]\n    }\n    site: {\n      siteMetadata: {\n        social: {\n          medium: string\n        }\n      }\n    }\n  }\n}\n\nconst IndexPage = (props: AllMarkdownProps) => {\n  return (\n    <Layout>\n      <SEO />\n      <section>\n        <h1>Books I've read.</h1>\n        <div\n          css={css`\n            display: flex;\n            flex-wrap: wrap;\n          `}\n        >\n          {props.data.books.edges.map(({ node }) => {\n            return (\n              <div\n                key={node.id}\n                css={css`\n                  flex-basis: 25%;\n                  padding: 3px;\n                `}\n              >\n                <Link to={node.fields.slug}>\n                  <img\n                    src={node.frontmatter.thumbnail.publicURL}\n                    css={css`\n                      border: 1px darkgrey solid;\n                    `}\n                    alt={node.frontmatter.title}\n                  />\n                </Link>\n              </div>\n            )\n          })}\n        </div>\n      </section>\n      <section>\n        <h1>Blogs I've written.</h1>\n        {props.data.mediumBlogs.nodes.map(blog => {\n          return (\n            <a\n              key={blog.id}\n              href={blog.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              css={css`\n                text-decoration: none;\n              `}\n            >\n              <p>\n                {blog.title} - {blog.date}\n              </p>\n            </a>\n          )\n        })}\n        <a\n          href={props.data.site.siteMetadata.social.medium}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          css={css`\n            text-decoration: none;\n          `}\n        >\n          <p>see more</p>\n        </a>\n      </section>\n      <section>\n        <h1>Games I've played.</h1>\n        <div\n          css={css`\n            display: flex;\n            flex-wrap: wrap;\n          `}\n        >\n          {props.data.games.edges.map(({ node }) => {\n            return (\n              <div\n                key={node.id}\n                css={css`\n                  flex-basis: 33.33%;\n                  padding: 3px;\n                `}\n              >\n                <Link to={node.fields.slug}>\n                  <img\n                    src={node.frontmatter.cover.publicURL}\n                    css={css`\n                      border: 1px darkgrey solid;\n                    `}\n                    alt={node.frontmatter.title}\n                  />\n                </Link>\n              </div>\n            )\n          })}\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    books: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { tags: { eq: \"เล่าหนังสือ\" }, draft: { ne: true } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            cover {\n              name\n              publicURL\n            }\n            thumbnail {\n              name\n              publicURL\n            }\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(truncate: true, pruneLength: 250)\n        }\n      }\n    }\n    games: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: { frontmatter: { tags: { eq: \"เล่าเกม\" }, draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            cover {\n              name\n              publicURL\n            }\n            thumbnail {\n              name\n              publicURL\n            }\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(truncate: true, pruneLength: 250)\n        }\n      }\n    }\n    mediumBlogs: allMediumFeed {\n      nodes {\n        id\n        date(fromNow: true)\n        title\n        link\n      }\n    }\n    site {\n      siteMetadata {\n        social {\n          medium\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}