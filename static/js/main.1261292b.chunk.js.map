{"version":3,"sources":["screens/Blog/index.tsx","screens/Blog/components/Blog.tsx","screens/Home/index.tsx","screens/Home/components/Home.tsx","config/Routes.tsx","serviceWorker.js","index.tsx"],"names":["Blog","react","style","textAlign","React","Home","Routes","BrowserRouter","basename","process","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","config_Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAEeA,mLCGX,OACEC,EAAA,yBACEA,EAAA,oBAAIC,MAAO,CAAEC,UAAW,WAAxB,gBAJWC,aCDJC,mLCGX,OACEJ,EAAA,yBACEA,EAAA,oBAAIC,MAAO,CAAEC,UAAW,WAAxB,8BAJWC,aCgBJE,mLAZX,OACEL,EAAA,cAACM,EAAA,EAAD,CAAQC,SAAUC,IAChBR,EAAA,cAACS,EAAA,EAAD,KACET,EAAA,cAACU,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjCJ,EAAA,cAACU,EAAA,EAAD,CAAOC,KAAK,QAAQE,UAAWd,IAC/BC,EAAA,cAACU,EAAA,EAAD,CAAOG,UAAW,kBAAMb,EAAA,sDAPbG,mBCODW,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,SAAgBnB,EAAA,cAACoB,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.1261292b.chunk.js","sourcesContent":["import Blog from './components/Blog'\n\nexport default Blog\n","import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Blog extends React.Component {\n  public render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: 'center' }}>Blog</h1>\n      </div>\n    )\n  }\n}\n\nexport default Blog\n","import Home from './components/Home'\n\nexport default Home\n","import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Home extends React.Component {\n  public render() {\n    return (\n      <div>\n        <h1 style={{ textAlign: 'center' }}>Under Construction</h1>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import * as React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Blog from '../screens/Blog'\nimport Home from '../screens/Home'\n\nclass Routes extends React.Component {\n  public render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route component={() => <div>404 Not Found</div>} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport Routes from './config/Routes'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Routes />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}