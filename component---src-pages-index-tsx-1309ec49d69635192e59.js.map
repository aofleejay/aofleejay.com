{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx"],"names":["query","IndexPage","props","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","data","allMarkdownRemark","edges","map","_ref5","node","key","id","css","rhythm","gatsby__WEBPACK_IMPORTED_MODULE_2__","_ref","to","fields","slug","frontmatter","title","_ref2","date","tags","tag","_ref3","_ref4","cover","src","publicURL","alt","name","excerpt","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","StaticQuery","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","__webpack_require__","d","__webpack_exports__","typography__WEBPACK_IMPORTED_MODULE_0__","systemFontStack","typography","n","Typography","headerFontFamily","bodyFontFamily","_ref6","className","href","target","rel","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","shape","pathname","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","defaultTitle","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","undefined"],"mappings":"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","file":"component---src-pages-index-tsx-1309ec49d69635192e59.js","sourcesContent":["import { css } from '@emotion/core'\nimport { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\n\ninterface AllMarkdownProps {\n  data: {\n    allMarkdownRemark: {\n      edges: [\n        {\n          node: {\n            id: string\n            frontmatter: {\n              title: string\n              cover: {\n                name: string\n                publicURL: string\n              }\n              date: Date\n              tags: [string]\n            }\n            fields: {\n              slug: string\n            }\n            excerpt: string\n          }\n        },\n      ]\n    }\n  }\n}\n\nconst IndexPage = (props: AllMarkdownProps) => (\n  <Layout>\n    <SEO />\n    {props.data.allMarkdownRemark.edges.map(({ node }) => (\n      <div\n        key={node.id}\n        css={css`\n          margin-bottom: ${rhythm(2)};\n        `}\n      >\n        <Link\n          css={css`\n            text-decoration: none;\n            color: inherit;\n          `}\n          to={node.fields.slug}\n        >\n          <h1\n            css={css`\n              margin-bottom: ${rhythm(1 / 2)};\n            `}\n          >\n            {node.frontmatter.title}\n          </h1>\n        </Link>\n        <p\n          css={css`\n            color: #bbb;\n          `}\n        >\n          {node.frontmatter.date}\n          <span\n            css={css`\n              padding: 0 ${rhythm(1 / 2)};\n            `}\n          >\n            |\n          </span>\n          {node.frontmatter.tags.map(tag => (\n            <Link\n              key={tag}\n              to={`/tags/${tag}`}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <span>{tag}</span>\n            </Link>\n          ))}\n        </p>\n        <Link\n          css={css`\n            text-decoration: none;\n            color: inherit;\n          `}\n          to={node.fields.slug}\n        >\n          {node.frontmatter.cover && (\n            <img\n              src={node.frontmatter.cover.publicURL}\n              alt={node.frontmatter.cover.name}\n            />\n          )}\n          <p>{node.excerpt}</p>\n        </Link>\n      </div>\n    ))}\n  </Layout>\n)\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            cover {\n              name\n              publicURL\n            }\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(truncate: true, pruneLength: 250)\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from 'typography'\n\nconst systemFontStack = [\n  '-apple-system',\n  'BlinkMacSystemFont',\n  'Segoe UI',\n  'Roboto',\n  'Oxygen-Sans',\n  'Ubuntu',\n  'Cantarell',\n  'Helvetica Neue',\n  'Helvetica',\n  'Arial',\n  'sans-serif',\n]\n\nconst typography = new Typography({\n  headerFontFamily: systemFontStack,\n  bodyFontFamily: systemFontStack,\n})\n\nexport default typography\nexport const rhythm = typography.rhythm\n","import React from 'react'\nimport { css } from '@emotion/core'\nimport { Link } from 'gatsby'\n\nimport { rhythm } from '../utils/typography'\n\nexport default ({ children }) => (\n  <>\n    <div\n      className=\"asdasdasd\"\n      css={css`\n        background-color: salmon;\n      `}\n    >\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 700px;\n          padding: ${rhythm(1)};\n        `}\n      >\n        <Link\n          css={css`\n            color: #ffffff;\n            text-decoration: none;\n          `}\n          to={`/`}\n        >\n          HOME\n        </Link>\n        <div\n          css={css`\n            float: right;\n\n            @media only screen and (max-width: 320px) {\n              float: none;\n            }\n          `}\n        >\n          <a\n            css={css`\n              color: #ffffff;\n              text-decoration: none;\n            `}\n            href=\"https://medium.com/@aofleejay/latest\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SOFTWARE DEVELOPMENT\n          </a>\n          <span\n            css={css`\n              padding: 0 ${rhythm(0.5)};\n              color: #ffffff;\n            `}\n          >\n            |\n          </span>\n          <Link\n            to={`/about/`}\n            css={css`\n              color: #ffffff;\n              text-decoration: none;\n            `}\n          >\n            ABOUT\n          </Link>\n        </div>\n      </div>\n    </div>\n    <div>\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 700px;\n          padding: ${rhythm(2)} ${rhythm(1)};\n        `}\n      >\n        {children}\n      </div>\n    </div>\n  </>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({\n  description,\n  lang,\n  meta,\n  keywords,\n  title,\n}: {\n  description: string\n  lang: string\n  meta: [any]\n  keywords: [string]\n  title: string\n}) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s - ${data.site.siteMetadata.title}`}\n            defaultTitle={`${data.site.siteMetadata.title} - ${data.site.siteMetadata.description}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : [],\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  description: undefined,\n  lang: `th`,\n  meta: [],\n  keywords: [],\n  title: undefined,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}