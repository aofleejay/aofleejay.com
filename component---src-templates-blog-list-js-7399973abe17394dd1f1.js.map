{"version":3,"sources":["webpack:///./src/components/BlogCard.tsx","webpack:///./src/templates/blog-list.js"],"names":["BlogCard","post","css","rhythm","to","fields","slug","frontmatter","title","date","tags","map","tag","key","cover","src","publicURL","alt","name","excerpt","BlogList","render","posts","this","props","data","allMarkdownRemark","edges","node","id","React","Component","blogListQuery"],"mappings":"6XA2FeA,IAnE0B,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC1C,OACE,mBACEC,IAAKA,YAAF,iBACgBC,YAAO,GADvB,MAIH,YAAC,OAAD,CACED,IAAG,EAIHE,GAAIH,EAAKI,OAAOC,MAEhB,kBACEJ,IAAKA,YAAF,iBACgBC,YAAO,IADvB,MAIFF,EAAKM,YAAYC,QAGtB,iBACEN,IAAG,GAIFD,EAAKM,YAAYE,KAClB,oBACEP,IAAKA,YAAF,aACYC,YAAO,IADnB,MADL,KAOCF,EAAKM,YAAYG,KAAKC,KAAI,SAAAC,GAAG,OAC5B,YAAC,OAAD,CACEC,IAAKD,EACLR,GAAE,SAAWQ,EACbV,IAAG,GAKH,wBAAOU,QAIb,YAAC,OAAD,CACEV,IAAG,EAIHE,GAAIH,EAAKI,OAAOC,MAEfL,EAAKM,YAAYO,OAChB,mBACEC,IAAKd,EAAKM,YAAYO,MAAME,UAC5BC,IAAKhB,EAAKM,YAAYO,MAAMI,OAGhC,qBAAIjB,EAAKkB,a,gMChFIC,E,gLACnBC,OAAA,WACE,IAAMC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAChD,OACE,YAAC,IAAD,KACGL,EAAMX,KAAI,gBAAGiB,EAAH,EAAGA,KAAH,OACT,YAAC,IAAD,CAAUf,IAAKe,EAAKC,GAAI5B,KAAM2B,S,GANFE,IAAMC,WAa/BC,EAAa","file":"component---src-templates-blog-list-js-7399973abe17394dd1f1.js","sourcesContent":["import React from 'react'\nimport { css } from '@emotion/core'\nimport { Link } from 'gatsby'\n\nimport { rhythm } from '../utils/typography'\n\ntype BlogCardProp = {\n  post: {\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      title: string\n      date: string\n      tags: string[]\n      cover: {\n        publicURL: string\n        name: string\n      }\n    }\n    excerpt: string\n  }\n}\n\nconst BlogCard: React.FC<BlogCardProp> = ({ post }) => {\n  return (\n    <div\n      css={css`\n        margin-bottom: ${rhythm(2)};\n      `}\n    >\n      <Link\n        css={css`\n          text-decoration: none;\n          color: inherit;\n        `}\n        to={post.fields.slug}\n      >\n        <h1\n          css={css`\n            margin-bottom: ${rhythm(1 / 2)};\n          `}\n        >\n          {post.frontmatter.title}\n        </h1>\n      </Link>\n      <p\n        css={css`\n          color: #bbb;\n        `}\n      >\n        {post.frontmatter.date}\n        <span\n          css={css`\n            padding: 0 ${rhythm(1 / 2)};\n          `}\n        >\n          |\n        </span>\n        {post.frontmatter.tags.map(tag => (\n          <Link\n            key={tag}\n            to={`/tags/${tag}`}\n            css={css`\n              text-decoration: none;\n              color: inherit;\n            `}\n          >\n            <span>{tag}</span>\n          </Link>\n        ))}\n      </p>\n      <Link\n        css={css`\n          text-decoration: none;\n          color: inherit;\n        `}\n        to={post.fields.slug}\n      >\n        {post.frontmatter.cover && (\n          <img\n            src={post.frontmatter.cover.publicURL}\n            alt={post.frontmatter.cover.name}\n          />\n        )}\n        <p>{post.excerpt}</p>\n      </Link>\n    </div>\n  )\n}\n\nexport default BlogCard\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport BlogCard from '../components/BlogCard'\n\nexport default class BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    return (\n      <Layout>\n        {posts.map(({ node }) => (\n          <BlogCard key={node.id} post={node} />\n        ))}\n      </Layout>\n    )\n  }\n}\n\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            cover {\n              name\n              publicURL\n            }\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(truncate: true, pruneLength: 250)\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}