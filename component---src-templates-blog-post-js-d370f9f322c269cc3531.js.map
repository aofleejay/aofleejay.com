{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./src/components/layout.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx"],"names":["query","BlogPost","_ref","post","data","markdownRemark","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","frontmatter","cover","src","publicURL","alt","name","dangerouslySetInnerHTML","__html","html","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","StaticQuery","props","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","__webpack_require__","d","__webpack_exports__","rhythm","typography__WEBPACK_IMPORTED_MODULE_0__","systemFontStack","typography","n","Typography","headerFontFamily","bodyFontFamily","_ref6","css","gatsby__WEBPACK_IMPORTED_MODULE_2__","_ref2","to","_ref3","_ref4","href","target","rel","_ref5","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","shape","pathname","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_5__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","defaultTitle","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","undefined","array","arrayOf"],"mappings":"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","file":"component---src-templates-blog-post-js-d370f9f322c269cc3531.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nconst BlogPost = ({ data }) => {\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <div>\n        <h1>{post.frontmatter.title}</h1>\n        {post.frontmatter.cover && (\n          <img\n            src={post.frontmatter.cover.publicURL}\n            alt={post.frontmatter.cover.name}\n          />\n        )}\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        cover {\n          name\n          publicURL\n        }\n      }\n    }\n  }\n`\n\nexport default BlogPost\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from 'typography'\n\nconst systemFontStack = [\n  '-apple-system',\n  'BlinkMacSystemFont',\n  'Segoe UI',\n  'Roboto',\n  'Oxygen-Sans',\n  'Ubuntu',\n  'Cantarell',\n  'Helvetica Neue',\n  'Helvetica',\n  'Arial',\n  'sans-serif',\n]\n\nconst typography = new Typography({\n  headerFontFamily: systemFontStack,\n  bodyFontFamily: systemFontStack,\n})\n\nexport default typography\nexport const rhythm = typography.rhythm\n","import React from 'react'\nimport { css } from '@emotion/core'\nimport { Link } from 'gatsby'\n\nimport { rhythm } from '../utils/typography'\n\nexport default ({ children }) => (\n  <>\n    <div\n      css={css`\n        background-color: salmon;\n      `}\n    >\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 700px;\n          padding: ${rhythm(1)} ${rhythm(2)};\n        `}\n      >\n        <Link\n          css={css`\n            color: #ffffff;\n            text-decoration: none;\n          `}\n          to={`/`}\n        >\n          HOME\n        </Link>\n        <div\n          css={css`\n            float: right;\n          `}\n        >\n          <a\n            css={css`\n              color: #ffffff;\n              text-decoration: none;\n            `}\n            href=\"https://medium.com/@aofleejay/latest\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SOFTWARE DEVELOPMENT\n          </a>\n          <span\n            css={css`\n              padding: 0 ${rhythm(0.5)};\n              color: #ffffff;\n            `}\n          >\n            |\n          </span>\n          <Link\n            to={`/about/`}\n            css={css`\n              color: #ffffff;\n              text-decoration: none;\n            `}\n          >\n            ABOUT\n          </Link>\n        </div>\n      </div>\n    </div>\n    <div>\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 700px;\n          padding: ${rhythm(2)};\n          padding-top: ${rhythm(1.5)};\n        `}\n      >\n        {children}\n      </div>\n    </div>\n  </>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s - ${data.site.siteMetadata.title}`}\n            defaultTitle={`${data.site.siteMetadata.title} - ${data.site.siteMetadata.description}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : [],\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  description: undefined,\n  lang: `th`,\n  meta: [],\n  keywords: [],\n  title: undefined,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}